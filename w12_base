int[][] grid = new int[4][4]; // 4x4 grid
boolean[][] revealed = new boolean[4][4]; // Track revealed cards
int cellSize; // Size of each cell

void setup() {
    size(500, 500);
    cellSize = width / 4; // Calculate cell size
    initializeGrid(); // Initialize the grid with numbers
}

void draw() {
    background(255);
    drawGrid(); // Draw the grid with numbers
}

void initializeGrid() {
    // Create an array with numbers 1-8, each appearing twice
    int[] numbers = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8};
    // Shuffle the array
    int i = numbers.length - 1;
    while (i > 0) {
        int j = (int) random(i + 1);
        int temp = numbers[i];
        numbers[i] = numbers[j];
        numbers[j] = temp;
        i--;
    }

    // Fill the grid with shuffled numbers
    int index = 0;
    int row = 0;
    while (row < 4) {
        int col = 0;
        while (col < 4) {
            grid[row][col] = numbers[index];
            index++;
            col++;
        }
        row++;
    }
}

void drawGrid() {
    stroke(0); // Set stroke color for grid lines
    int i = 0;
    while (i < 4) {
        int j = 0;
        while (j < 4) {
            fill(255); // Default fill color for boxes
            rect(j * cellSize, i * cellSize, cellSize, cellSize); // Draw the cell
            if (revealed[i][j]) {
                fill(0); // Change fill color for revealed numbers
                textSize(32);
                textAlign(CENTER, CENTER);
                text(grid[i][j], j * cellSize + cellSize / 2, i * cellSize + cellSize / 2); // Display the number
            }
            j++;
        }
        i++;
    }
}

// Example: You can add mousePressed to reveal cards based on mouse clicks
void mousePressed() {
    int col = mouseX / cellSize; // Determine which column was clicked
    int row = mouseY / cellSize; // Determine which row was clicked
    if (col < 4 && row < 4) {
        revealed[row][col] = !revealed[row][col]; // Toggle revealed state
    }
}
