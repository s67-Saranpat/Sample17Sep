int[][] grid = new int[4][4]; // 4x4 grid
boolean[][] revealed = new boolean[4][4]; // Track revealed cards
int cellSize; // Size of each cell
int firstCardRow = -1, firstCardCol = -1; 
int secondCardRow = -1, secondCardCol = -1; // Track the second revealed card
boolean secondCardRevealed = false; // Track if the second card is revealed
int revealDelay = 1000; // Delay in milliseconds to hide cards
int lastRevealTime = 0; // Time of last reveal

void setup() {
    size(500, 500);
    cellSize = width / 4; // Calculate cell size
    initializeGrid(); // Initialize the grid with numbers
}

void draw() {
    background(255);
    drawGrid(); // Draw the grid with numbers
    
    // Check if the second card has been revealed and if the delay has passed
    if (secondCardRevealed && millis() - lastRevealTime > revealDelay) {
        // Hide both cards if they do not match
        if (grid[firstCardRow][firstCardCol] != grid[secondCardRow][secondCardCol]) {
            revealed[firstCardRow][firstCardCol] = false; // Hide the first card
            revealed[secondCardRow][secondCardCol] = false; // Hide the second card
        }
        // Reset the tracking variables
        firstCardRow = -1;
        firstCardCol = -1;
        secondCardRow = -1;
        secondCardCol = -1;
        secondCardRevealed = false; // Reset second card state
    }
}

void initializeGrid() {
    // Create an array with numbers 1-8, each appearing twice
    int[] numbers = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8};
    // Shuffle the array
    int i = numbers.length - 1;
    while (i > 0) {
        int j = (int) random(i + 1);
        int temp = numbers[i];
        numbers[i] = numbers[j];
        numbers[j] = temp;
        i--;
    }

    // Fill the grid with shuffled numbers
    int index = 0;
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            grid[row][col] = numbers[index];
            index++;
        }
    }
}

void drawGrid() {
    stroke(0); // Set stroke color for grid lines
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            fill(255); // Default fill color for boxes
            rect(j * cellSize, i * cellSize, cellSize, cellSize); // Draw the cell
            if (revealed[i][j]) {
                fill(0); // Change fill color for revealed numbers
                textSize(32);
                textAlign(CENTER, CENTER);
                text(grid[i][j], j * cellSize + cellSize / 2, i * cellSize + cellSize / 2); // Display the number
            }
        }
    }
}

void mousePressed() {
    int col = mouseX / cellSize; // Determine which column was clicked
    int row = mouseY / cellSize; // Determine which row was clicked
    if (col < 4 && row < 4 && !revealed[row][col]) {
        // If this is the first card being revealed
        if (firstCardRow == -1) {
            firstCardRow = row;
            firstCardCol = col;
            revealed[row][col] = true; // Reveal the first card
        } else {
            // If this is the second card being revealed
            secondCardRow = row;
            secondCardCol = col;
            revealed[row][col] = true; // Reveal the second card
            secondCardRevealed = true; // Mark that the second card is revealed
            lastRevealTime = millis(); // Record the time when the second card was revealed
        }
    }
}
